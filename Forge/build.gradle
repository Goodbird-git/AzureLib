plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "me.modmuss50.mod-publish-plugin" version "0.4.0"
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

version = mod_version
group = maven_group

base {
    archivesName = "${mod_id}-forge-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

sourceSets.all {
    it.output.resourcesDir = it.output.classesDirs.getFiles().iterator().next()
}

mixin {
    add sourceSets.main, "azurelib.refmap.json"
    config "azurelib.mixins.json"
}

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        configureEach {
            workingDirectory project.file('run')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.debug.export', 'true'
            property 'mixin.hotSwap', 'true'
            property 'mixin.checks.interfaces', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=azurelib.mixins.json"
        }

        server {
            workingDirectory project.file('runServer')
            singleInstance true
            args '--nogui'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.debug.export', 'true'
            property 'mixin.hotSwap', 'true'
            property 'mixin.checks.interfaces', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            args "-mixin.config=azurelib.mixins.json"
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    embed
    compile.extendsFrom(embed)
}

repositories {
    maven {
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${loader_version}"
    implementation(fg.deobf("curse.maven:mixin-booter-419286:${project.mixinbooter_version}"))
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"
    embed('org.spongepowered:mixin:${project.mixin_version}') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : "AzureLib",
                'Specification-Vendor'    : "AzureDoom",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "AzureDoom",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'ForceLoadAsMod': true
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar.finalizedBy('reobfJar')

publishing {
    repositories {
        maven {
            name = "azurelib"
            url = "https://maven.azuredoom.com/mods"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.maven_group
            artifactId = project.archives_base_name
            version = project.mod_version
            from components.java
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.groupId.text() == 'net.minecraftforge' && dep.artifactId.text() == 'forge') {
                        dep.parent().remove(dep)
                    }
                }
            }
        }
    }
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = jar.archiveFile
        changelog = rootProject.file("changelog.txt").text
        type = STABLE
        modLoaders.add("forge")

        curseforge {
            projectId = "817423"
            projectSlug = "azurelib"
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add("1.12.2")
            requires {
                slug = "mixin-booter"
            }
        }
        modrinth {
            projectId = "7zlUOZvb"
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add("1.12.2")
            requires {
                slug = "mixinbooter"
            }
        }
    }
}