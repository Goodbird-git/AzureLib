plugins {
    id 'multiloader-loader'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'me.modmuss50.mod-publish-plugin' version "${modmuss50_mod_publish_version}"
}

def at = file('src/main/resources/META-INF/accesstransformer.cfg')
if (at.exists()) {
    minecraft.accessTransformers.file at
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:20.5.5-beta"
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = jar.archiveFile
        changelog = rootProject.file("changelog.md").text
        type = STABLE
        modLoaders.add("neoforge")

        curseforge {
            projectId = project.curseforge_id
            projectSlug = project.mod_id
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add(project.minecraft_version)
        }
        modrinth {
            projectId = project.modrinth_id
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add(project.minecraft_version)
        }
    }
}