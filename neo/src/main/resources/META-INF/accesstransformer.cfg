public net.minecraft.sounds.SoundEvent createFixedRangeEvent(Lnet/minecraft/resources/ResourceLocation;F)Lnet/minecraft/sounds/SoundEvent; # createFixedRangeEvent
public net.minecraft.world.entity.Entity yRot # yRot
public net.minecraft.world.entity.Entity xRot # xRot
public net.minecraft.world.entity.Entity getLeashOffset()Lnet/minecraft/world/phys/Vec3; # getLeashOffset

public net.minecraft.client.model.geom.ModelPart$Cube
public net.minecraft.client.model.geom.ModelPart cubes # cubes
public net.minecraft.client.renderer.LevelRenderer shouldShowEntityOutlines()Z # shouldShowEntityOutlines
public net.minecraft.world.entity.WalkAnimationState speedOld # speedOld
public net.minecraft.client.model.AgeableListModel scaleHead # scaleHead
public net.minecraft.client.model.AgeableListModel babyYHeadOffset # babyYHeadOffset
public net.minecraft.client.model.AgeableListModel babyZHeadOffset # babyZHeadOffset
public net.minecraft.client.model.AgeableListModel babyHeadScale # babyHeadScale
public net.minecraft.client.model.AgeableListModel babyBodyScale # babyBodyScale
public net.minecraft.client.model.AgeableListModel bodyYOffset # bodyYOffset
public-f net.minecraft.client.renderer.LevelRenderer renderBuffers # renderBuffers
public-f net.minecraft.client.renderer.entity.layers.HumanoidArmorLayer renderModel(Lcom/mojang/blaze3d/vertex/PoseStack;Lnet/minecraft/client/renderer/MultiBufferSource;ILnet/minecraft/world/item/ArmorItem;Lnet/minecraft/client/model/HumanoidModel;ZFFFLjava/lang/String;)V # renderModel
public net.minecraft.world.level.pathfinder.NodeEvaluator currentContext # currentContext
public net.minecraft.client.renderer.RenderStateShard LIGHTMAP # LIGHTMAP
public net.minecraft.client.gui.screens.Screen renderables # renderables

public net.minecraft.client.renderer.entity.EntityRenderDispatcher renderers # renderers
public net.minecraft.client.renderer.RenderStateShard$ShaderStateShard
public net.minecraft.client.renderer.RenderStateShard$TextureStateShard
public net.minecraft.client.renderer.RenderStateShard$TransparencyStateShard
public net.minecraft.client.renderer.RenderStateShard$WriteMaskStateShard
public net.minecraft.client.renderer.RenderType$CompositeState
public net.minecraft.client.renderer.RenderType create(Ljava/lang/String;Lcom/mojang/blaze3d/vertex/VertexFormat;Lcom/mojang/blaze3d/vertex/VertexFormat$Mode;IZZLnet/minecraft/client/renderer/RenderType$CompositeState;)Lnet/minecraft/client/renderer/RenderType$CompositeRenderType; # create
public net.minecraft.client.renderer.RenderType create(Ljava/lang/String;Lcom/mojang/blaze3d/vertex/VertexFormat;Lcom/mojang/blaze3d/vertex/VertexFormat$Mode;ILnet/minecraft/client/renderer/RenderType$CompositeState;)Lnet/minecraft/client/renderer/RenderType$CompositeRenderType; # create
public com.mojang.blaze3d.vertex.BufferBuilder building # building
public net.minecraft.world.level.block.entity.BlockEntityType$BlockEntitySupplier

# Brain
public net.minecraft.world.entity.ai.Brain sensors
public net.minecraft.world.entity.ai.Brain memories
public net.minecraft.world.entity.ai.Brain activityRequirements
public net.minecraft.world.entity.ai.Brain activityMemoriesToEraseWhenStopped
public net.minecraft.world.entity.ai.behavior.Behavior entryCondition
public-f net.minecraft.world.entity.ai.Brain$Provider
public net.minecraft.world.entity.ai.Brain$Provider <init>(Ljava/util/Collection;Ljava/util/Collection;)V
public net.minecraft.world.entity.ai.Brain setMemoryInternal(Lnet/minecraft/world/entity/ai/memory/MemoryModuleType;Ljava/util/Optional;)V
public net.minecraft.world.entity.ai.Brain$MemoryValue setMemoryInternal(Lnet/minecraft/world/entity/ai/Brain;)V
public net.minecraft.world.entity.ai.Brain forgetOutdatedMemories()V
public net.minecraft.world.entity.ai.Brain coreActivities
public net.minecraft.world.entity.ai.Brain activeActivities
public net.minecraft.world.entity.ai.Brain availableBehaviorsByPriority
public net.minecraft.world.entity.ai.Brain activityRequirementsAreMet(Lnet/minecraft/world/entity/schedule/Activity;)Z
public net.minecraft.world.entity.ai.Brain setActiveActivity(Lnet/minecraft/world/entity/schedule/Activity;)V

# Behaviour
public-f net.minecraft.world.entity.ai.behavior.Behavior tryStart(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;J)Z
public net.minecraft.world.entity.ai.behavior.Behavior endTimestamp
public net.minecraft.world.entity.ai.behavior.Behavior status
public net.minecraft.world.entity.ai.behavior.Behavior hasRequiredMemories(Lnet/minecraft/world/entity/LivingEntity;)Z
public net.minecraft.world.entity.ai.behavior.GateBehavior behaviors

# Sensor
public-f net.minecraft.world.entity.ai.sensing.Sensor tick(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V
public net.minecraft.world.entity.ai.sensing.Sensor scanRate
public net.minecraft.world.entity.ai.sensing.Sensor RANDOM

# World
public net.minecraft.world.level.Level getEntities()Lnet/minecraft/world/level/entity/LevelEntityGetter;
public net.minecraft.client.multiplayer.ClientLevel getEntities()Lnet/minecraft/world/level/entity/LevelEntityGetter;
public net.minecraft.server.level.ServerLevel getEntities()Lnet/minecraft/world/level/entity/LevelEntityGetter;

# Entities
public net.minecraft.world.entity.Entity setSharedFlag(IZ)V

# Schedule
public net.minecraft.world.entity.schedule.Schedule timelines

# Navigation
public net.minecraft.world.level.pathfinder.Path nodes
public net.minecraft.world.entity.ai.navigation.GroundPathNavigation getSurfaceY()I
public net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation allowBreaching

# Other
public-f net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities nearbyEntities
public-f net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities lineOfSightTest
public net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities <init>()V